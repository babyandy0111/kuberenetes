--- # 新增一個deployment
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: babyandy0111/nginx-1.13:v1.0.0
        ports:
        - containerPort: 80
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          name: nginx-config
        - mountPath: /usr/share/nginx/html
          name: nginx-html
      - name: php-server
        image: babyandy0111/php-7.2-fpm:v1.0.0
        volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: nginx-html
        ports:
        - containerPort: 9000
        resources:
          requests:
            cpu: 200m
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          items:
          - key: nginx-config
            path: default.conf
      - name: nginx-html
        hostPath:
          path: /home/ubuntu/vhosts/test
--- #HPA
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-deployment-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1beta2
    kind: Deployment
    name: nginx-deployment
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 50
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-config
data:
  nginx-config: |
    server {
        listen       80;
        listen      443;
        server_name  test.fashionguide.com.tw;
        root   /usr/share/nginx/html;
        index  index.php index.html index.htm;

        #location / {
        #    try_files $uri $uri/ /index.php$is_args$args;
        #}

        location ~ \.php$ {
            fastcgi_pass   localhost:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }

       location ~ /\.ht {
           deny  all;
       }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  annotations:
    # Note that the backend talks over HTTP.
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    # TODO: Fill in with the ARN of your certificate.
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:iam::504689623092:server-certificate/cloudfront/fashionguide.com.tw
    # Only run SSL on the port named "https" below.
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  #type: LoadBalancer
  type: NodePort
  selector:
    app: nginx   #<=== 綁定標記為 nginx 的 Pod
  ports:
    - name: http
      # the port for client to access
      port: 80
      # the port that web server listen on
      targetPort: 80
      # TCP/UDP are available, default is TCP
      protocol: TCP
    - name: https
      port: 443
      targetPort: 443
      protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Ingress   #<=== 指定物件種類為 Ingress
metadata:
  name: web
spec:
  rules:
  - host: test.fashionguide.com.tw   #<=== 指定 host 名稱為 green.fashionguide.com.tw
    http:
      paths:
      - backend:
          serviceName: nginx-service  #<=== 綁定名稱為 green-service 的 Service 物件
          servicePort: 80
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: php-service 
#spec:
#  type: NodePort
#  selector:
#    app: nginx
#  ports:
#  - protocol: TCP
#    port: 9000
#---
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#  name: nfs-pv 
#spec:
#  capacity:
#    storage: 1Gi 
#  accessModes:
#    - ReadWriteMany 
#  persistentVolumeReclaimPolicy: Retain 
#  nfs: 
#    path: /home/ubuntu/vhosts/test
#    server: 13.114.229.62
#    readOnly: false
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: nfs-pvc  
#spec:
#  accessModes:
#  - ReadWriteOnce      
#  resources:
#     requests:
#       storage: 1Gi



